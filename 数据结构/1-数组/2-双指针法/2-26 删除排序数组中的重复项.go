package main

import "fmt"

//LeetCode 26 删除排序数组中的重复项
//给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，
//返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。

//由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，
//如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。

//将最终结果插入 nums 的前 k 个位置后返回 k 。

//不要使用额外的空间，你必须在 原地 修改输入数组， 并在使用 O(1) 额外空间的条件下完成。

//示例
//输入：nums = [1,1,2]
//输出：2, nums = [1,2,_]
//解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中
//超出新长度后面的元素。

// 思路
// 注意：升序排列

// 方法1：暴力方法，使用新的数组空间，循环取不同的数组往新的数组中放

// 方法2：双指针法-官方，推荐 ****
// 快指针用来找到非重复的元素
// 慢指针用来扫描可覆盖的位置
// 时间复杂度： O(n)，其中 n 是数组的长度。快指针和慢指针最多各移动 n  次。
// 空间复杂度： O(1)。只需要使用常数的额外空间。
func f1(nums []int) int {
	n := len(nums)
	if n == 0 {
		return 0
	}
	slow := 1
	for fast := 1; fast < n; fast++ {
		if nums[fast-1] != nums[fast] {
			nums[slow] = nums[fast]
			slow++
		}
	}
	return slow
}

func main() {
	arr := []int{1, 1, 2, 2, 3, 4, 5, 5}
	fmt.Println(f1(arr))
}
